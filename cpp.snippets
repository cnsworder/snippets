extends c

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet cpph "include file header" !b
/**
 * Copyright (c),2002-`!v strftime("%Y")`,AllWin Tel CO.,LTD. 
 * All rights reserved.
 *
 * @file			`!v expand("%:t")`
 * @brief			${1:description here}
 * @date			`!v strftime("%Y-%m-%d/%H:%M:%S")`
 * @compiler		${2:compiler or ide}
 * @author			tracyone , tracyone@live.cn
 * @lastchange		`!v strftime("%Y-%m-%d/%H:%M:%S")`
 * @history
 * 1,`!v strftime("%Y-%m-%d/%H:%M:%S")` first release
 *
 * ================================================================
 */
#ifndef _`!v toupper(tr(expand("%:t"),".","_"))`
#define _`!v toupper(tr(expand("%:t"),".","_"))`

${0:/*CODE HERE*/}

#endif /*End of file*/
endsnippet
# vim:ft=snippets:
